<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kb.keyboard.warrior.dao.WikiDao">

	<!-- 부모id 찾기 -->
	<select id="getParentid" resultType="Integer">
		SELECT parent_id from Menu
		where id = #{param}
	</select>
	
	<!-- 부모기준으로 형제들을 순서대로 찾기 -->
	<select id="findByParentIdOrderByMenuOrder" resultType="kb.keyboard.warrior.dto.MenuDTO">
		SELECT * FROM Menu
		WHERE parent_id = #{param1} AND userno = #{param2}
		ORDER BY menu_order ASC
	</select>
	<select id="findNoParentOrderByMenuOrder" resultType="kb.keyboard.warrior.dto.MenuDTO">
		SELECT * FROM Menu
		WHERE parent_id IS NULL AND userno = #{param}
		ORDER BY menu_order ASC
	</select>
	
	<!-- 일반 max order 찾기 -->
	<select id="getMaxOrderOfFather" resultType="Integer">
		SELECT COALESCE(MAX(menu_order), 0) FROM Menu WHERE parent_id = #{param}
	</select>
	<!-- 최상위인경우 max order 찾기 -->
	<select id="getMaxOrderOfnoParents" resultType="Integer">
		SELECT COALESCE(MAX(menu_order), 0) FROM Menu WHERE parent_id IS NULL
	</select>


	<!-- 메뉴추가 메서드 4종류 -->
	<insert id="insertMenuNoParentsItem">
		INSERT INTO Menu (title, titleShare, link, menuType,
		menu_order, userno, isOpen, category)
		VALUES (
		#{param1},
		#{param2},
		#{param3},
		#{param4},
		#{param5},
		#{param6},
		#{param7},
		#{param8}
		);
	</insert>

	<insert id="insertMenuNoParentsFolder">
		INSERT INTO Menu (title, titleShare, menuType,
		menu_order, userno, isOpen)
		VALUES (
		#{param1},
		#{param2},
		#{param3},
		#{param4},
		#{param5},
		#{param6}
		);
	</insert>

	<insert id="insertMenuHaveParentsItem">
		INSERT INTO Menu (parent_id, title, titleShare, link,
		menuType, menu_order, userno, isOpen, category)
		VALUES (
		#{param1},
		#{param2},
		#{param3},
		#{param4},
		#{param5},
		#{param6},
		#{param7},
		#{param8},
		#{param9}
		);
	</insert>

	<insert id="insertMenuHaveParentsFolder">
		INSERT INTO Menu (parent_id, title, titleShare, menuType, menu_order, userno, isOpen, category)
		VALUES (
		#{param1},
		#{param2},
		#{param3},
		#{param4},
		#{param5},
		#{param6},
		#{param7},
		#{param8}
		);
	</insert>

	<!-- 삭제 -->
	<delete id="deleteItem">
		DELETE FROM Menu where id = #{param1} and userno =
		#{param2}
	</delete>

	<select id="getChildIds" parameterType="Integer"
		resultType="Integer">
		SELECT id FROM Menu WHERE parent_id = #{parentId}
	</select>

	<delete id="deleteFolder" parameterType="map">
		DELETE FROM Menu WHERE id = #{param1} AND userno = #{param2}
	</delete>

	<select id="getMenuDetail"
		resultType="kb.keyboard.warrior.dto.MenuDTO">
		SELECT * FROM Menu WHERE id = #{param}
	</select>

	<update id="changeMenuNoShare">
		UPDATE Menu
		SET title = #{param1}, titleShare = NULL, category = #{param2}
		where id = #{param3}
	</update>

	<update id="changeMenuYesShare">
		UPDATE Menu
		SET title = #{param1}, titleShare = #{param2}, category = #{param3}
		where id = #{param4}
	</update>

	<update id="changeIsOpen">
		UPDATE Menu SET isOpen = #{param1} where id =
		#{param2}
	</update>
	
	<!-- 순서변경 -->
	<update id="updateMenuOrder">
		UPDATE Menu SET menu_order = #{param2} WHERE id = #{param1}
	</update>
	
	<select id="getNewCopyId" resultType="String">
		SELECT MAX(id) FROM Menu WHERE userno = #{param} 
	</select>

	<!-- 위키디테일출력 -->
	<select id="getData" resultType="String">
		SELECT data from EditorData
		where id = #{param}
	</select>
	<!-- 위키 공개여부 체크 -->
	<select id="checkItIsopen" resultType="Integer">
		select isopen from Menu where id= #{param1}
	</select>

	<!-- 위키디테일저장 -->
	<insert id="insertWiki">
		INSERT INTO EditorData (id, data) VALUES (#{param1}, #{param2})
	</insert>
	<update id="updateWiki">
		UPDATE EditorData SET data = #{param2} WHERE id =
		#{param1}
	</update>

	<!-- 사진사이즈저장 값이 있는지 확인 -->
	<select id="getSize" resultType="String">
		SELECT width from imageSize
		where wikiId = #{param1} and url = #{param2}
	</select>

	<!-- 사진정보 INSERT -->
	<insert id="insertSize">
		INSERT INTO imageSize VALUES (#{param1}, #{param2},
		#{param3})
	</insert>

	<!-- 사진정보 UPDATE -->
	<update id="updateSize">
		UPDATE imageSize
		SET width = #{param3}
		WHERE wikiId =
		#{param1} and url =#{param2}
	</update>

	<!-- 이미지정보 모두 불러오기 -->
	<select id="getAllSizeOfImg"
		resultType="kb.keyboard.warrior.dto.ImageSizeDTO">
		SELECT * FROM imageSize where wikiId = #{param}
	</select>


	<!-- 게시글 관련 메소드들 -->
	<select id="getAllPost"
		resultType="kb.keyboard.warrior.dto.BoardDTO">

  SELECT
    ROW_NUMBER() OVER (ORDER BY like_count DESC, comment_count DESC) AS management_number, -- 관리번호
    e.id, -- 테이블상 실제글번호
    m.title, -- 개인 메뉴리스트용 글제목
    m.titleShare, -- 다른사람들이 공유하는 제목
    m.userno, -- 작성자 사번
    u.nickname, -- 작성자 닉네임
    m.category, -- 카테고리
    u.username, -- 작성자 이름
    e.data, -- 글내용
    m.isOpen, -- 공개여부 (어차피 1로 필터링해서 없어도됨) 
    CASE 
        WHEN u.picture IS NOT NULL THEN u.userno 
        ELSE '1234567'
		END AS picture, -- null이면 기본사진
    COALESCE(wh.hits, 0) AS hits_count, -- 조회수
	COALESCE(l.like_count, 0) AS like_count, -- 좋아요수
	COALESCE(c.comment_count, 0) AS comment_count -- 댓글수
  from
		EditorData e
  join Menu m 
      on e.id = m.id
  join user u 
      on m.userno = u.userno
  join WikiHits wh 
      on m.id = wh.wikiId
  left outer join ( 
      SELECT targetid, COUNT(*) AS like_count
			FROM liketable
			GROUP BY targetid ) l
		ON e.id = l.targetid
	  LEFT OUTER JOIN (
			SELECT targetid, count(*) AS comment_count
			FROM comment
			WHERE commentstatus = 1
			GROUP BY targetid ) c
		ON c.targetid = e.id
	  WHERE
		m.isOpen = 1
	  ORDER BY
		like_count DESC,
		comment_count DESC;
	</select>

	<select id="getMyPost"
		resultType="kb.keyboard.warrior.dto.BoardDTO">
		SELECT
		ROW_NUMBER() OVER (ORDER BY e.id ASC) AS
		management_number,
		e.id, m.title,m.titleShare, m.userno , u.nickname, m.category,
		u.username, e.data, m.isOpen,
        CASE 
        WHEN u.picture IS NOT NULL THEN u.userno 
        ELSE '1234567' 
		END AS picture,
        COALESCE(wh.hits, 0) AS hits_count,
		COALESCE(l.like_count, 0) AS like_count,
		COALESCE(c.comment_count, 0) AS comment_count
		from
		EditorData e
		join Menu m on e.id = m.id
		join user u on m.userno =
		u.userno
        join WikiHits wh on m.id = wh.wikiId
		left outer join ( SELECT targetid, COUNT(*) AS like_count
		FROM
		liketable
		GROUP BY targetid
		) l
		on e.id = l.targetid
		left outer join (select targetid, count(*) as
		comment_count
		from comment
		where commentstatus = 1
		group by targetid) c
		on c.targetid = e.id
		where m.isOpen = 1 and m.userno = #{param}
		order by management_number;

	</select>
	<select id="myTotalLike" resultType="java.lang.Integer">
		SELECT
		COALESCE(sum(like_count) , 0)
		from EditorData e
		join Menu m on e.id = m.id
		join user u on m.userno =
		u.userno
		left outer join ( SELECT targetid, COUNT(*) AS like_count
		FROM
		liketable
		GROUP BY targetid
		) l
		on e.id = l.targetid
		where m.isOpen = 1 and m.userno = #{param};
	</select>

	<select id="getLikedPost"
		resultType="kb.keyboard.warrior.dto.BoardDTO">
		select l.targetid as id, l.userno, m.titleShare
		from
		liketable l
		join Menu m
		on l.targetid = m.id
		where l.userno = #{param1}
	</select>
	<select id="getBestPost"
		resultType="kb.keyboard.warrior.dto.BoardDTO">
		SELECT
		ROW_NUMBER() OVER (ORDER BY e.id ASC) AS management_number,
		e.id,
		m.title,
		m.titleShare,
		m.userno,
		u.nickname,
		e.data,
		m.isOpen,
		COALESCE(l.like_count, 0) AS like_count,
		COALESCE(c.comment_count, 0) AS comment_count
		FROM EditorData e
		JOIN Menu m ON e.id = m.id
		JOIN
		user u ON m.userno = u.userno
		LEFT OUTER JOIN (
		SELECT targetid, COUNT(*) AS like_count
		FROM liketable
		GROUP BY targetid
		) l ON e.id = l.targetid
		LEFT OUTER JOIN (
		SELECT targetid, COUNT(*) AS comment_count
		FROM comment
		WHERE commentstatus = 1
		GROUP BY targetid
		) c ON c.targetid = e.id
		WHERE m.isOpen = 1
		ORDER BY
		like_count DESC, comment_count DESC
		LIMIT 5;
	</select>
	<select id="getBestWriter"
		resultType="kb.keyboard.warrior.dto.BoardDTO">
		SELECT 
		    t.like_count,
		    t.userno,
		    u.username,
		    u.nickname
		FROM (
		    SELECT 
		        SUM(l.like_count) AS like_count, 
		        u.userno
		    FROM EditorData e
		    JOIN Menu m ON e.id = m.id
		    JOIN user u ON m.userno = u.userno
		    LEFT OUTER JOIN (
		        SELECT targetid, COUNT(*) AS like_count
		        FROM liketable
		        GROUP BY targetid
		    ) l ON e.id = l.targetid
		    WHERE m.isOpen = 1
		    GROUP BY u.userno
		    ORDER BY like_count DESC
		    LIMIT 3
		) t
		JOIN user u ON t.userno = u.userno;
	</select>

	
	<select id="getWriterNickName" resultType="String">
		SELECT nickname FROM user WHERE userno = #{param}
	</select>
	
	<!-- 조회수 찾기-->
	<select id="getHitsById" resultType="Integer">
		SELECT hits FROM WikiHits WHERE wikiId = #{param}
	</select>
	<!-- 조회수 업데이트 (++) -->
	<update id="updateHits">
		UPDATE WikiHits SET hits = hits + 1 WHERE wikiId = #{param}
	</update>
	<insert id="insertHits">
		INSERT INTO WikiHits VALUES (#{param}, 1)	
	</insert>
	<select id="findWriterName" resultType="kb.keyboard.warrior.dto.BoardDTO" > 
		select m.*, u.username 
		from Menu m
		join user u
		on m.userno = u.userno
		where isopen ='1' and m.id=#{param1} 
	</select>
	<select id="getOnesRecord" resultType="kb.keyboard.warrior.dto.BoardDTO" >
		SELECT
		u.userno, sum(hits) as hits_count, sum(l.like_count) as like_count,  sum(c.comment_count) as comment_count, count(e.id) as note_count
		from
		EditorData e
		join Menu m on e.id = m.id
		join user u on m.userno =
		u.userno
        join WikiHits wh on m.id = wh.wikiId
		left outer join ( SELECT targetid, COUNT(*) AS like_count
		FROM
		liketable
		GROUP BY targetid
		) l
		on e.id = l.targetid
		left outer join (select targetid, count(*) as
		comment_count
		from comment
		where commentstatus = 1
		group by targetid) c
		on c.targetid = e.id
		where m.isOpen = 1 and u.userno = '3331796'
		group by u.userno;
	</select>
</mapper>
