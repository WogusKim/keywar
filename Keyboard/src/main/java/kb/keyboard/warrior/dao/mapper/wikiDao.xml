<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kb.keyboard.warrior.dao.WikiDao">
	
	<!-- 부모id 찾기 -->
	<select id="getParentid" resultType="Integer">
		SELECT parent_id from Menu where id = #{param}
	</select>
	<!-- 일반 max order 찾기 -->
	<select id="getMaxOrderOfFather" resultType="Integer">
	    SELECT COALESCE(MAX(menu_order), 0) FROM Menu WHERE parent_id = #{param}
	</select>
	<!-- 최상위인경우 max order 찾기 -->
	<select id="getMaxOrderOfnoParents" resultType="Integer">
	    SELECT COALESCE(MAX(menu_order), 0) FROM Menu WHERE parent_id IS NULL
	</select>
		
		
	<!-- 메뉴추가 메서드 4종류 -->
	<insert id="insertMenuNoParentsItem">
		INSERT INTO Menu (title, titleShare, link, menuType, menu_order, userno, isOpen)
		VALUES (
		    #{param1}, 
		    #{param2},
		    #{param3},
		    #{param4},
		    #{param5},
		    #{param6},
		    #{param7}
		);
	</insert>
	
	<insert id="insertMenuNoParentsFolder">
		INSERT INTO Menu (title, titleShare, menuType, menu_order, userno, isOpen)
		VALUES (
		    #{param1}, 
		    #{param2},
		    #{param3},
		    #{param4},
		    #{param5},
		    #{param6}
		);
	</insert>
	
	<insert id="insertMenuHaveParentsItem">
		INSERT INTO Menu (parent_id, title, titleShare, link, menuType, menu_order, userno, isOpen)
		VALUES (
		    #{param1}, 
		    #{param2},
		    #{param3},
		    #{param4},
		    #{param5},
		    #{param6},
		    #{param7},
		    #{param8}
		);
	</insert>
	
	<insert id="insertMenuHaveParentsFolder">
		INSERT INTO Menu (parent_id, title, titleShare, menuType, menu_order, userno, isOpen)
		VALUES (
		    #{param1}, 
		    #{param2},
		    #{param3},
		    #{param4},
		    #{param5},
		    #{param6},
		    #{param7}
		);
	</insert>
	
	<!-- 삭제 -->
	<delete id ="deleteItem">
		DELETE FROM Menu where id = #{param1} and userno = #{param2}
	</delete>
	
	<select id="getChildIds" parameterType="Integer" resultType="Integer">
	    SELECT id FROM Menu WHERE parent_id = #{parentId}
	</select>
	
	<delete id="deleteFolder" parameterType="map">
	    DELETE FROM Menu WHERE id = #{param1} AND userno = #{param2}
	</delete>
	
	<select id="getMenuDetail" resultType="kb.keyboard.warrior.dto.MenuDTO">
		SELECT * FROM Menu WHERE id = #{param}
	</select>
	
	<update id="changeMenuNoShare">
		UPDATE Menu
		SET title = #{param1}, titleShare = NULL
		where id = #{param2}
	</update>
	
	<update id="changeMenuYesShare">
		UPDATE Menu
		SET title = #{param1}, titleShare = #{param2}
		where id = #{param3}
	</update>
	
	<update id="changeIsOpen">
		UPDATE Menu SET isOpen = #{param1} where id = #{param2}
	</update>
	
	
	<!-- 위키디테일출력 -->
	<select id="getData" resultType="String">
		SELECT data from EditorData where id = #{param}
	</select>
	
	<!-- 위키디테일저장 -->
	<insert id="insertWiki">
		 INSERT INTO EditorData (id, data) VALUES (#{param1}, #{param2})
	</insert>
	<update id="updateWiki">
		UPDATE EditorData SET data = #{param2} WHERE id = #{param1}
	</update>
	
	<!-- 사진사이즈저장 값이 있는지 확인 -->
	<select id="getSize" resultType="String">
		SELECT width from imageSize where wikiId = #{param1} and url = #{param2}
	</select>
	
	<!-- 사진정보 INSERT -->
	<insert id="insertSize">
		INSERT INTO imageSize VALUES (#{param1}, #{param2}, #{param3})
	</insert>
	
	<!-- 사진정보 UPDATE -->
	<update id="updateSize">
		UPDATE imageSize
		SET width = #{param3}
		WHERE wikiId = #{param1} and url =#{param2}
	</update>
	
	<!-- 이미지정보 모두 불러오기 -->
	<select id="getAllSizeOfImg" resultType="kb.keyboard.warrior.dto.ImageSizeDTO">
		SELECT * FROM imageSize where wikiId = #{param}
	</select>
	
	<select id="getAllPost" resultType="kb.keyboard.warrior.dto.BoardDTO">
		SELECT 
		ROW_NUMBER() OVER (order by like_count desc, comment_count desc) AS management_number,
		e.id, m.title,m.titleShare, m.userno , u.username, e.data, m.isOpen, 
		COALESCE(l.like_count, 0) AS like_count,
		COALESCE(c.comment_count, 0) AS comment_count
		from EditorData e
		join Menu m on e.id = m.id
		join user u on m.userno = u.userno
		left outer join ( SELECT targetid, COUNT(*) AS like_count
		FROM liketable
		GROUP BY targetid
		) l 
		on e.id = l.targetid
		left outer join (select targetid, count(*) as comment_count
		from comment
		where commentstatus = 1
		group by targetid) c
		on c.targetid = e.id
		where m.isOpen = 1
		order by like_count desc, comment_count desc
	</select>
	
	<select id="getMyPost" resultType="kb.keyboard.warrior.dto.BoardDTO">
		SELECT 
		ROW_NUMBER() OVER (ORDER BY e.id ASC) AS management_number,
		e.id, m.title,m.titleShare, m.userno , u.username, e.data, m.isOpen, 
		COALESCE(l.like_count, 0) AS like_count,
		COALESCE(c.comment_count, 0) AS comment_count
		from EditorData e
		join Menu m on e.id = m.id
		join user u on m.userno = u.userno
		left outer join ( SELECT targetid, COUNT(*) AS like_count
		FROM liketable
		GROUP BY targetid
		) l 
		on e.id = l.targetid
		left outer join (select targetid, count(*) as comment_count
		from comment
		where commentstatus = 1
		group by targetid) c
		on c.targetid = e.id
		where m.isOpen = 1 and m.userno = #{param}
	</select>
	<select id="myTotalLike" resultType="java.lang.Integer">
		SELECT 
		COALESCE(sum(like_count) , 0) 
		from EditorData e
		join Menu m on e.id = m.id
		join user u on m.userno = u.userno
		left outer join ( SELECT targetid, COUNT(*) AS like_count
		FROM liketable
		GROUP BY targetid
		) l 
		on e.id = l.targetid
		where m.isOpen = 1 and m.userno = #{param};
	</select>
	
</mapper>
